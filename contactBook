import tkinter as tk
from tkinter import messagebox
from tkinter.simpledialog import askstring
import re

class Contact:
    def _init_(self, name, phone_number, email, address):
        self.name = name
        self.phone_number = phone_number
        self.email = email
        self.address = address

class ContactBookApp:
    def _init_(self, root):
        self.root = root
        self.root.title("Contact Book")
        self.root.geometry("410x350")
        self.root.resizable(width=False, height=False)
        self.root.configure(bg="#f0f0f0")

        # Centering the window on the screen
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        x_coordinate = (screen_width - 400) // 2
        y_coordinate = (screen_height - 300) // 2
        self.root.geometry("+{}+{}".format(x_coordinate, y_coordinate))

        self.contacts = []

        self.name_var = tk.StringVar()
        self.phone_var = tk.StringVar()
        self.email_var = tk.StringVar()
        self.address_var = tk.StringVar()

        self.create_widgets()

    def create_widgets(self):
        # Labels
        tk.Label(self.root, text="Name:", bg="#f0f0f0", font=("Arial", 12)).grid(row=0, column=0, padx=5, pady=5, sticky="e")
        tk.Label(self.root, text="Phone:", bg="#f0f0f0", font=("Arial", 12)).grid(row=1, column=0, padx=5, pady=5, sticky="e")
        tk.Label(self.root, text="Email:", bg="#f0f0f0", font=("Arial", 12)).grid(row=2, column=0, padx=5, pady=5, sticky="e")
        tk.Label(self.root, text="Address:", bg="#f0f0f0", font=("Arial", 12)).grid(row=3, column=0, padx=5, pady=5, sticky="e")

        # Entry fields
        tk.Entry(self.root, textvariable=self.name_var, font=("Arial", 12)).grid(row=0, column=1, padx=5, pady=5)
        tk.Entry(self.root, textvariable=self.phone_var, font=("Arial", 12)).grid(row=1, column=1, padx=5, pady=5)
        tk.Entry(self.root, textvariable=self.email_var, font=("Arial", 12)).grid(row=2, column=1, padx=5, pady=5)
        tk.Entry(self.root, textvariable=self.address_var, font=("Arial", 12)).grid(row=3, column=1, padx=5, pady=5)

        # Buttons
        tk.Button(self.root, text="Add Contact", command=self.add_contact, font=("Arial", 12)).grid(row=4, column=0, columnspan=5, pady=10)
        tk.Button(self.root, text="View Contact List", command=self.view_contact_list, font=("Arial", 12)).grid(row=5, column=0, columnspan=5, pady=10)
        tk.Button(self.root, text="Search Contact", command=self.search_contact_popup, font=("Arial", 12)).grid(row=6, column=0, columnspan=5, pady=10)
        tk.Button(self.root, text="Update Contact", command=self.update_contact, font=("Arial", 12)).grid(row=7, column=0, columnspan=5, pady=10)
        tk.Button(self.root, text="Delete Contact", command=self.delete_contact, font=("Arial", 12)).grid(row=8, column=0, columnspan=5, pady=5)
        tk.Button(self.root, text="Exit", command=self.root.destroy, font=("Arial", 12)).grid(row=9, column=0, columnspan=5, pady=5)

        # Listbox to display contact list
        self.listbox = tk.Listbox(self.root, width=40, height=6, font=("Arial", 12))
        self.listbox.grid(row=10, column=0, columnspan=2, padx=5, pady=5)

        # Centering content inside the window panel
        for child in self.root.winfo_children():
            child.grid_configure(padx=10, pady=5)

    def validate_phone_number(self, phone_number):
        # Phone number validation
        if not re.match(r'^\d{10}$', phone_number):
            messagebox.showerror("Error", "Invalid phone number format. Please enter a 10-digit phone number.")
            return False
        return True

    def validate_email(self, email):
        # Email validation
        if not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email):
            messagebox.showerror("Error", "Invalid email format. Please enter a valid email address.")
            return False
        return True

    def add_contact(self):
        name = self.name_var.get()
        phone = self.phone_var.get()
        email = self.email_var.get()
        address = self.address_var.get()

        if name and self.validate_phone_number(phone) and self.validate_email(email):
            contact = Contact(name, phone, email, address)
            self.contacts.append(contact)
            messagebox.showinfo("Success", "Contact added successfully.")
            self.update_contact_listbox()
        else:
            messagebox.showerror("Error", "Name, phone number, and email are required.")

    def view_contact_list(self):
        if self.contacts:
            contact_list = "\n".join([f"{contact.name} - {contact.phone_number}" for contact in self.contacts])
            messagebox.showinfo("Contact List", contact_list)
        else:
            messagebox.showinfo("Contact List", "No contacts found.")

    def search_contact_popup(self):
        query = askstring("Search Contact", "Enter name or phone number to search:")
        if query is not None:
            self.search_contact(query)

    def search_contact(self, query):
        if not query:
            messagebox.showerror("Error", "Please enter a name or phone number to search.")
            return

        found_contacts = [contact for contact in self.contacts if query.lower() in contact.name.lower() or query in contact.phone_number]
        if found_contacts:
            contact_list = "\n".join([f"Name: {contact.name}, Phone: {contact.phone_number}, Email: {contact.email}, Address: {contact.address}" for contact in found_contacts])
            messagebox.showinfo("Search Results", contact_list)
        else:
            messagebox.showinfo("Search Results", "No matching contacts found.")

    def update_contact(self):
        name = self.name_var.get()
        phone = self.phone_var.get()
        email = self.email_var.get()
        address = self.address_var.get()

        if not name or not phone:
            messagebox.showerror("Error", "Please enter name and phone number to update.")
            return

        for contact in self.contacts:
            if contact.name.lower() == name.lower() or contact.phone_number == phone:
                contact.name = name
                contact.phone_number = phone
                contact.email = email
                contact.address = address
                messagebox.showinfo("Success", "Contact updated successfully.")
                self.update_contact_listbox()
                return

        messagebox.showerror("Error", "Contact not found.")

    def delete_contact(self):
        selected_index = self.listbox.curselection()
        if selected_index:
            contact_index = selected_index[0]
            contact = self.contacts[contact_index]
            self.contacts.remove(contact)
            self.update_contact_listbox()
            messagebox.showinfo("Success", "Contact deleted successfully.")
        else:
            messagebox.showerror("Error", "Please select a contact to delete.")

    def update_contact_listbox(self):
        self.listbox.delete(0, tk.END)
        for contact in self.contacts:
            self.listbox.insert(tk.END, f"{contact.name} - {contact.phone_number}")

def main():
    root = tk.Tk()
    app = ContactBookApp(root)
    root.mainloop()

if _name_ == "_main_":
    main()
